* TODO Can I compute "(x is a cat) AND (x is not garfield)"?
I wrote the code (learning/negation.hs); it doesn't run.
It obeys the laws of Datalog that I understand. (I don't know whether it has a stratification problem, because that law I don't understand.)
* TODO See if it's okay to use newtypes for labels
That would let me specify that the label for a Rel2 should be a Lab2.
* TODO How can I find an ID based on another field?
e.g. for `data Atom = Atom ID String`, how to find an Atom'd ID based on its String?
* stale: fancy GADT, lengthed vector work
** TODO next: replace each Vect Node with a Vect ID
** TODO What's wrong with Hypegraph/NodesInDb.hs?
** I am not sure of this.
*** The HypergraphNode can't have those Vect fields.
**** why
***** Including the Vect fields means handing the nesting to Haskell's type system.
***** Querying it using Datalog means handing the nesting to Datalog.
**** therefore next:
***** There are still 3 types of node: Atom, Flav, Rel
***** Each has an ID, so it can be looked up in the "nodes" database.
***** Look up an Atom, get the associated word or phrase.
***** Look up a Flav, get the associated list of joints
****** Use the (length-1) of that list as its arity; seems easier than keeping a separate field and ensuring they match.
***** Look up a Rel, get nothing (except the fact that it's a Rel).
